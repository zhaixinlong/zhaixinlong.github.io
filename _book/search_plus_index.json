{"./":{"url":"./","title":"前言","keywords":"","body":"Gitbook 📚编程 https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-07 16:31:31 "},"EXAMPLE.html":{"url":"EXAMPLE.html","title":"EXAMPLE","keywords":"","body":"Gitbook演示 前言 第一章 第二章 第二章第一节 第二章第二节 演示各种功能和效果 当前Gitbook源码目录结构 提示hint和插图编号callout 代码高亮显示 附录 参考资料 https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-07 18:01:09 "},"md/books/":{"url":"md/books/","title":"📚","keywords":"","body":"Gitbook JAVA GOLANG https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-18 11:41:41 "},"md/books/java.html":{"url":"md/books/java.html","title":"JAVA","keywords":"","body":"Java 深入浅出Java多线程 https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-07 16:29:34 "},"md/books/golang.html":{"url":"md/books/golang.html","title":"GOLANG","keywords":"","body":"GoLang Go语言高级编程(Advanced Go Programming) Goa-基于中间件的轻量级golang web框架->GitHub Go 阅读清单 Grpc Go GORM API GORM 中文文档 GORM 中文文档 https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-09 15:56:48 "},"md/articles/":{"url":"md/articles/","title":"📚","keywords":"","body":"Gitbook java golang golang-gorm-many2many postgres kong安装 https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-28 16:03:06 "},"md/articles/java/01.html":{"url":"md/articles/java/01.html","title":"笔记","keywords":"","body":"Java 测试01 测试02 https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-18 11:46:04 "},"md/articles/golang/01.html":{"url":"md/articles/golang/01.html","title":"笔记","keywords":"","body":"golang 框架 开源界有这么几种框架，第一种是对httpRouter进行简单的封装，然后提供定制的中间件和一些简单的小工具集成比如gin，主打轻量，易学，高性能。第二种是借鉴其它语言的编程风格的一些MVC类框架，例如beego，方便从其它语言迁移过来的程序员快速上手，快速开发。还有一些框架功能更为强大，除了数据库schema设计，大部分代码直接生成，例如goa。不管哪种框架，适合开发者背景的就是最好的。 gin httprouter httprouter考虑到字典树的深度，在初始化时会对参数的数量进行限制，所以在路由中的参数数目不能超过255，否则会导致httprouter无法识别后续的参数。不过这一点上也不用考虑太多，毕竟URI是人设计且给人来看的，相信没有长得夸张的URI能在一条路径中带有200个以上的参数。 用validator解放体力劳动 从设计的角度讲，我们一定会为每个请求都声明一个结构体。前文中提到的校验场景我们都可以通过validator完成工作。还以前文中的结构体为例。为了美观起见，我们先把json tag省略掉。这里我们引入一个新的validator库： https://github.com/go-playground/validator 1 https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-17 17:31:52 "},"md/articles/golang/02.html":{"url":"md/articles/golang/02.html","title":"GORM-MANY2MANY","keywords":"","body":"gorm many2many GORM API package main import ( \"fmt\" \"github.com/jinzhu/gorm\" _ \"github.com/jinzhu/gorm/dialects/postgres\" ) type User struct { Id int `json:\"id\" gorm:\"primary_key\"` Name string Languages []Language `gorm:\"many2many:user_languages;\"` } type Language struct { Id int `json:\"id\" gorm:\"primary_key\"` Name string `json:\"name\" gorm:\"unique\" validate:\"required\"` Users []User `gorm:\"many2many:user_languages;\"` } func main() { // Connection is the connection string connection := \"host=localhost port=5432 user=kong dbname=gorm-test password=kong sslmode=disable\" db, _ := gorm.Open(\"postgres\", connection) db.LogMode(true) db.AutoMigrate(&User{}, &Language{}) // DemoLanguageCreate(db) // DemoUserCreate(db) DemoGetLanguageUsers(db) DemoGetUserLanguages(db) // ps.db.Model(&model.User{ // Id: 9, // Name: \"test1\", // Languages: languages, // }).Association(\"Languages\").Find(&languages) // fmt.Println(Language) } func DemoLanguageCreate(db *gorm.DB) { db.Create(&Language{ Id: 5, Name: \"cn5\", }) } func DemoUserCreate(db *gorm.DB) { languages := []Language{} languages = append(languages, Language{Id: 1, Name: \"cn1\"}) languages = append(languages, Language{Id: 2, Name: \"cn2\"}) languages = append(languages, Language{Id: 3, Name: \"cn3\"}) languages = append(languages, Language{Id: 4, Name: \"cn4\"}) db.Create(&User{ Id: 2, Name: \"test2\", Languages: languages, }) } func DemoGetLanguageUsers(db *gorm.DB) { var users []User db.Model(&Language{Id: 1}).Related(&users, \"Users\") fmt.Println(users) } func DemoGetUserLanguages(db *gorm.DB) { var languages []Language // db.Model(&User{Id: 1}).Offset(1).Limit(1).Related(&languages, \"Languages\") db.Model(&User{Id: 1}).Offset(0).Limit(2).Related(&languages, \"Languages\") fmt.Println(languages) } func DemoAssociationOperate(db *gorm.DB) { // languages := []Language{} // languages = append(languages, Language{Id: 1, Name: \"cn1\"}) // languages = append(languages, Language{Id: 2, Name: \"cn2\"}) // languages = append(languages, Language{Id: 3, Name: \"cn3\"}) // languages = append(languages, Language{Id: 4, Name: \"cn4\"}) // 更新 更新关联关系，删除+新增 // ps.db.Save(&User{ // Id: 9, // Name: \"test11\", // Languages: languages, // }).Association(\"languages\").Replace(languages) // 追加关联表 关联关系 新增 // ps.db.Model(&User{ // Id: 9, // Name: \"test1\", // Languages: languages, // }).Association(\"languages\").Append(languages) // 清理 所有关联 删除 // ps.db.Model(&User{ // Id: 9, // Name: \"test1\", // Languages: languages, // }).Association(\"languages\").Clear() // 更新关联关系，删除+新增 // db.Model(&User{ // Id: 9, // Name: \"test1\", // Languages: languages, // }).Association(\"languages\").Replace(languages) } https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-28 18:20:00 "},"md/articles/kong/01.html":{"url":"md/articles/kong/01.html","title":"安装","keywords":"","body":"docker kong postgres konga 创建kong 网络 docker network create kong-net 创建postgres docker run -d --name kong-database \\ --network=kong-net \\ -p 5432:5432 \\ -e \"POSTGRES_USER=postgres\" \\ -e \"POSTGRES_PASSWORD=postgres\" \\ -e \"POSTGRES_DB=postgres\" \\ postgres:9.6 创建用户kong及密码 create user kong with password 'kong'; 创建数据库kong create database kong owner kong; 初始化kong 数据库 docker run --rm \\ --network=kong-net \\ -e \"KONG_DATABASE=postgres\" \\ -e \"KONG_PG_HOST=kong-database\" \\ -e \"KONG_PG_PORT=5432\" \\ -e \"KONG_PG_USER=kong\" \\ -e \"KONG_PG_PASSWORD=kong\" \\ -e \"KONG_PG_DATABASE=kong\" \\ kong:0.13.1 kong migrations up 启动kong docker run -d --name kong \\ --network=kong-net \\ -e \"KONG_DATABASE=postgres\" \\ -e \"KONG_PG_HOST=kong-database\" \\ -e \"KONG_PG_PASSWORD=kong\" \\ -e \"KONG_PROXY_ACCESS_LOG=/dev/stdout\" \\ -e \"KONG_ADMIN_ACCESS_LOG=/dev/stdout\" \\ -e \"KONG_PROXY_ERROR_LOG=/dev/stderr\" \\ -e \"KONG_ADMIN_ERROR_LOG=/dev/stderr\" \\ -e \"KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl\" \\ -p 8000:8000 \\ -p 8443:8443 \\ -p 8001:8001 \\ -p 8444:8444 \\ kong:0.13.1 创建用户konga及密码 create user konga with password 'konga'; 创建数据库konga create database konga owner konga; 初始化konga数据库 docker run --rm \\ --network=kong-net \\ -e \"KONG_DATABASE=postgres\" \\ -e \"KONG_PG_HOST=kong-database\" \\ -e \"KONG_PG_PORT=5432\" \\ -e \"KONG_PG_USER=konga\" \\ -e \"KONG_PG_PASSWORD=konga\" \\ -e \"KONG_PG_DATABASE=konga\" \\ kong:0.13.1 kong migrations up 初始化konga数据库表 docker run -it --rm \\ --network=kong-net \\ --name kong_dashboard_a \\ -e \"DB_ADAPTER=postgres\" \\ -e \"DB_HOST=kong-database\" \\ -e \"DB_PORT=5432\" \\ -e \"DB_USER=konga\" \\ -e \"DB_PASSWORD=konga\" \\ -e \"DB_DATABASE=konga\" \\ -e \"NODE_ENV=development\" \\ pantsel/konga 启动konga docker run -d \\ --network=kong-net \\ --name kong_dashboard_konga \\ -p 1337:1337 \\ -e \"DB_ADAPTER=postgres\" \\ -e \"DB_HOST=kong-database\" \\ -e \"DB_PORT=5432\" \\ -e \"DB_USER=konga\" \\ -e \"DB_PASSWORD=konga\" \\ -e \"DB_DATABASE=konga\" \\ -e \"NODE_ENV=production\" \\ pantsel/konga https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-28 16:04:00 "},"md/articles/kong/02.html":{"url":"md/articles/kong/02.html","title":"笔记","keywords":"","body":"笔记 注意： 原文链接 kong:latest 表示安装最新版本，但是由于前端管理工具Dashboard目前只支持到0.14.x，如果管理kong版本过高，界面有点bug，所以我实际安装时这里选择kong:0.13.1 如果kong版本低于0.15时，kong migrations bootstrap应改为kong migrations up，>=0.15时使用 bootstrap https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-18 11:52:49 "},"md/articles/postgres/01.html":{"url":"md/articles/postgres/01.html","title":"问题","keywords":"","body":"postgres invalid byte sequence for encoding \"UTF8\": 0x00。 https://www.cnblogs.com/wggj/p/8194313.html postgresql的社区邮件列表里找到了这个问题：http://postgresql.1045698.n5.nabble.com/invalid-byte-sequence-for-encoding-quot-UTF8-quot-0x00-td2172080.html 解决方法：在向pg中copy或者insert数据提交之前，现将其中的字符类型字段值中的空字符\\0取掉即可成功执行。 strings.Replace(*str, \"\\u0000\", \"\", -1) golang 中 strings 包的 Replace func main() { // non-overlapping: \"123\" repeat 6 times in s s := \"123lafaldsjglad123lkfasdf123djfal123lkdjga123lksjfla123l\" old := \"123\" new := \"888\" fmt.Println(\"non-overlapping: \") // n https://zhaixinlong.github.io all right reserved，powered by Gitbook该文件修订时间： 2020-04-18 11:50:24 "}}